{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Welcome to the documentation for setting up and running the WASM compiler and Hyperbeam repository. This guide will walk you through the process of setting up the necessary components, compiling the WASM, and configuring the Hyperbeam repository to run and test effectively.</p>"},{"location":"#wasm-compiler-and-hyperbeam-setup","title":"WASM Compiler and Hyperbeam Setup","text":"<p>This section covers the steps required to set up and run the WASM compiler, as well as configuring and testing the Hyperbeam repository. Follow the instructions to prepare your environment and ensure smooth operation.</p> <ul> <li>Prerequisites: Instructions for installing the necessary dependencies such as Docker, Erlang, Rebar3, and optional tools like LLVM and WAMRC.</li> <li>WASM Compiler Setup: Learn how to build and configure the WASM compiler, generate a Docker image, and compile source code into a WASM file.</li> <li>Hyperbeam Repository Setup: Clone the Hyperbeam repository, compile the code using Rebar3, and get Hyperbeam up and running.</li> <li>Running Tests with Your Custom WASM: Steps to integrate your generated WASM file into the Hyperbeam repository, modify tests, and run them.</li> </ul>"},{"location":"hyperbeam_repository_setup/","title":"Hyperbeam Repository Setup","text":"<p>This guide provides step-by-step instructions for setting up and testing Hyperbeam.</p>"},{"location":"hyperbeam_repository_setup/#1-clone-the-hyperbeam-repository","title":"1. Clone the Hyperbeam Repository","text":"<p>First, clone the <code>permaweb/Hyperbeam</code> repository from GitHub:</p> <pre><code>git clone https://github.com/permaweb/HyperBEAM\n</code></pre> <p>Navigate to the project directory:</p> <pre><code>cd HyperBEAM\n</code></pre>"},{"location":"hyperbeam_repository_setup/#2-compile-the-code-with-rebar3","title":"2. Compile the Code with Rebar3","text":"<p>To compile the Hyperbeam code, you\u2019ll need to use Rebar3. Run the following command to compile the project:</p> <pre><code>rebar3 compile\n</code></pre> <p>This will compile the necessary code to get Hyperbeam up and running.</p>"},{"location":"hyperbeam_repository_setup/#3-run-hyperbeam-with-shell","title":"3. Run Hyperbeam with Shell","text":"<p>Once the code is compiled, you can start the Hyperbeam shell with Rebar3:</p> <pre><code>rebar3 shell\n</code></pre> <p>This command will start an interactive Erlang shell where you can interact with Hyperbeam.</p>"},{"location":"hyperbeam_repository_setup/#4-test-hyperbeam-with-eunit","title":"4. Test Hyperbeam with EUnit","text":"<p>To run the unit tests for Hyperbeam, use the following Rebar3 command:</p> <pre><code>rebar3 eunit\n</code></pre> <p>This will execute the EUnit tests and provide the results in your terminal.</p>"},{"location":"hyperbeam_repository_setup/#5-running-a-specific-module-test","title":"5. Running a Specific Module Test","text":"<p>To run tests for a specific module, use the following command:</p> <pre><code>rebar3 eunit --module hb_converge\n</code></pre> <p>This will run the tests for the <code>hb_converge</code> module.</p>"},{"location":"hyperbeam_repository_setup/#6-running-a-specific-test-in-a-module","title":"6. Running a Specific Test in a Module","text":"<p>To run a specific test within a module, use the <code>rebar3 shell</code> command with <code>eunit:test</code>. For example, to run the <code>path_test</code> in the <code>hb_converge</code> module:</p> <pre><code>rebar3 shell --eval \"eunit:test(hb_converge, [{tests, [path_test]}])\"\n</code></pre> <p>This command will execute the <code>path_test</code> within the <code>hb_converge</code> module.</p>"},{"location":"prerequisites/","title":"Prerequisites","text":"<p>Before you can start setting up and running the WASM compiler and Hyperbeam repository, make sure you have the following tools installed:</p>"},{"location":"prerequisites/#1-install-docker","title":"1. Install Docker","text":"<p>Docker is required to create and manage isolated environments for building and running your projects, including compiling the WASM. It provides a containerized environment where the necessary tools and dependencies for compiling the WASM are installed. You will use Docker to build the Docker image required for compiling your source code into a WASM file.</p>"},{"location":"prerequisites/#2-install-erlang-and-rebar3","title":"2. Install Erlang and Rebar3","text":"<p>Erlang is a key component for building and running projects that require concurrent, distributed systems. Rebar3 is a build tool for Erlang projects.</p>"},{"location":"prerequisites/#installation-instructions","title":"Installation Instructions:","text":"<ul> <li>Prerequisites:</li> </ul> <pre><code>sudo apt-get update\nsudo apt-get install -y libssl-dev ncurses-dev make cmake gcc g++\n</code></pre> <ul> <li>Install Erlang:</li> </ul> <pre><code>git clone https://github.com/erlang/otp.git &amp;&amp; cd otp &amp;&amp; git checkout maint-27 &amp;&amp; ./configure &amp;&amp; make -j8 &amp;&amp; sudo make install\n</code></pre> <ul> <li>Install Rebar3:</li> </ul> <pre><code>git clone https://github.com/erlang/rebar3.git &amp;&amp; cd rebar3 &amp;&amp; ./bootstrap &amp;&amp; sudo mv rebar3 /usr/local/bin/\n</code></pre>"},{"location":"prerequisites/#3-optional-for-aot-install-llvm-and-wamrc","title":"3. (Optional for AOT) Install LLVM and WAMRC","text":"<p>Coming Soon...</p>"},{"location":"running_tests_with_your_custom_wasm/","title":"Running Tests with Your Custom WASM","text":"<p>This guide walks you through the steps to create a WASM file, integrate it into the Hyperbeam repository, modify tests, and run them.</p>"},{"location":"running_tests_with_your_custom_wasm/#1-follow-the-steps-from-the-wasm-compiler-setup-to-create-a-wasm","title":"1. Follow the Steps from the WASM Compiler Setup to Create a WASM","text":"<p>Follow the instructions in the WASM Compiler Setup to clone the <code>hb-sandbox</code> repository, generate a Docker image, and compile the <code>ao-process</code> source code into a WASM file. Once you have the WASM file, you will use it in the next steps.</p>"},{"location":"running_tests_with_your_custom_wasm/#2-copy-the-wasm-file-to-the-hyperbeam-repository","title":"2. Copy the WASM File to the Hyperbeam Repository","text":"<p>After generating the WASM file, copy it to the <code>test</code> folder inside the Hyperbeam repository. You should place the file in the <code>./test</code> directory of the Hyperbeam repository:</p> <pre><code>cp /path/to/generated/wasm/file ./test/custom/process.wasm\n</code></pre> <p>Ensure the file is accessible within the repository structure.</p>"},{"location":"running_tests_with_your_custom_wasm/#3-edit-the-hb_beamr_testerl-to-point-to-your-new-wasm","title":"3. Edit the <code>hb_beamr_test.erl</code> to Point to Your New WASM","text":"<p>In the <code>./src/hb_beamr_test.erl</code> file, locate the line:</p> <pre><code>-define(WASM_CORE, \"test/interp/process.wasm\").\n</code></pre> <p>Update this line to point to your newly copied WASM file. Ensure the path correctly reflects the location of the file inside the <code>test</code> folder (<code>test/custom/process.wasm</code>).</p>"},{"location":"running_tests_with_your_custom_wasm/#4-modify-or-add-tests-in-hb_beamr_testerl","title":"4. Modify or Add Tests in <code>hb_beamr_test.erl</code>","text":"<p>You can modify existing tests or add new ones inside the <code>./src/hb_beamr_test.erl</code> file. For example, you can modify the <code>eval_test</code> function to use a different expression and assert that the result matches the expected value.</p> <p>Here is an example modification of the <code>eval_test</code>:</p> <pre><code>% Test the `handle` function for correctness\neval_test() -&gt;\n    WasmFile = ?WASM_CORE,\n    WasmBinary = setup_env(WasmFile),\n    ?event(\"Running aos64_handle_test\"),\n    {ok, Port, _Imports, _Exports} = hb_beamr:start(WasmBinary),\n    Env = gen_test_env(),\n    Msg = gen_test_aos_msg(\"return 1+5\"), % &lt;--- Update Here\n\n    %% Write data to WASM memory\n    {ok, EnvPtr} = hb_beamr_io:write_string(Port, Env),\n    {ok, MsgPtr} = hb_beamr_io:write_string(Port, Msg),\n\n    %% Call the \"handle\" function in the WASM\n    {ok, [ResultPtr]} = hb_beamr:call(Port, \"handle\", [MsgPtr, EnvPtr]),\n\n    %% Read and parse the result\n    {ok, ResponseBin} = hb_beamr_io:read_string(Port, ResultPtr),\n    case parse_wasm_response(ResponseBin) of\n        {ok, Response} -&gt;\n            ?event(io_lib:format(\"Response: ~p\", [Response])),\n            ?assertMatch(&lt;&lt;\"6\"&gt;&gt;, Response);   % &lt;--- Update Here\n        {error, Reason} -&gt;\n            ?event({\"Unexpected response\", Reason}),\n            ?assert(false)  % Fail the test explicitly\n    end,\n\n    %% Stop the WASM\n    hb_beamr:stop(Port),\n    ?event(\"aos64_handle_test passed\").\n</code></pre> <p>In this example, the expression <code>return 1+5</code> is tested, and the result should be <code>\"6\"</code>. You can change the expression to any other valid WASM code, and adjust the expected result accordingly.</p>"},{"location":"running_tests_with_your_custom_wasm/#5-run-the-test","title":"5. Run the Test","text":"<p>Once the tests are updated, you can run the tests using the following command:</p> <pre><code>HB_DEBUG=1 rebar3 shell --eval \"eunit:test(hb_beamr_test, [verbose]).\"\n</code></pre> <p>This command will start the Rebar3 shell, run the tests, and display verbose output, helping you to troubleshoot any issues that arise during testing.</p> <p>By following these steps, you will be able to integrate your custom WASM into the Hyperbeam repository, modify and add tests, and run them to verify the behavior of your system.</p>"},{"location":"wasm_compiler_setup/","title":"WASM Compiler Setup","text":"<p>This section provides instructions for building the WASM compiler and compiling your source code into a WASM file for use with HyperBeam.</p>"},{"location":"wasm_compiler_setup/#1-checkout-the-hb-sandbox-repository","title":"1. Checkout the <code>hb-sandbox</code> Repository","text":"<p>First, you need to clone the <code>hb-sandbox</code> repository, which contains the necessary scripts and tools for building the WASM compiler.</p> <pre><code>git clone https://github.com/permaweb/hb-sandbox\n</code></pre> <p>Navigate to the <code>hb-sandbox</code> directory:</p> <pre><code>cd hb-sandbox\n</code></pre>"},{"location":"wasm_compiler_setup/#2-generate-the-docker-image","title":"2. Generate the Docker Image","text":"<p>The next step is to generate a Docker image that will be used to compile your source files into a WASM. To do this, run the <code>build_wasm_compiler.sh</code> script:</p> <pre><code>./build_wasm_compiler.sh\n</code></pre> <p>This script will build a Docker image that includes all the necessary dependencies for compiling source files into WASM.</p>"},{"location":"wasm_compiler_setup/#3-compile-the-ao-process-source-code","title":"3. Compile the <code>ao-process</code> Source Code","text":"<p>Once the Docker image is built, you can use it to compile the <code>ao-process</code> source code into a WASM file that can be used in HyperBeam.</p> <p>Run the <code>compile_ao-process.sh</code> script to compile the source code:</p> <pre><code>./compile_ao-process.sh\n</code></pre> <p>This will use the newly generated Docker image to compile the <code>ao-process</code> source code into a WASM file located at <code>./ao-process/process.wasm</code>.</p>"},{"location":"wasm_compiler_setup/#final-output","title":"Final Output","text":"<p>After running the <code>compile_ao-process.sh</code> script, you will have a WASM file ready to be used within the HyperBeam environment.</p>"}]}