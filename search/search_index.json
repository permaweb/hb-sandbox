{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Welcome to the documentation for the WASM compiler and Hyperbeam repository setup. This guide will walk you through the process of setting up the WASM compiler, compiling a WASM, configuring the Hyperbeam repository, and running it effectively.</p>"},{"location":"#wasm-compiler-and-hyperbeam-setup","title":"WASM Compiler and Hyperbeam Setup","text":"<p>This section covers the steps required to set up and run the WASM compiler, as well as configuring the Hyperbeam repository. Follow the instructions to get your environment ready and ensure a smooth setup process.</p> <ul> <li>WASM Compiler Setup: Learn how to compile and configure the WASM compiler.</li> <li>Hyperbeam Repository Setup: Instructions on setting up the Hyperbeam repository, including dependency installation and configuration.</li> <li>Running the Hyperbeam Repository: Get started with running the Hyperbeam repository to test and run your project.</li> </ul>"},{"location":"build_wasm_compiler/","title":"Building Wasm Compiler","text":""},{"location":"character/","title":"Character","text":"<p>The <code>Character</code> class represents a player or entity character within the simulation, providing various configurations and methods for interaction.</p>"},{"location":"character/#properties","title":"Properties","text":"Property Type Description Default Value <code>position</code> <code>table</code> The position of the character in 3D space. <code>{ 0, 0, 0 }</code> <code>rotation</code> <code>table</code> The rotation of the character as a quaternion (x, y, z, w). <code>{ 0, 0, 0, 1 }</code> <code>radiusStanding</code> <code>number</code> The radius of the character when standing. <code>0.5</code> <code>heightStanding</code> <code>number</code> The height of the character when standing. <code>2.0</code> <code>radiusCrouching</code> <code>number</code> The radius of the character when crouching. <code>0.5</code> <code>heightCrouching</code> <code>number</code> The height of the character when crouching. <code>1.0</code> <code>up</code> <code>table</code> The up direction for the character, represented as a vector. <code>{ 0, 1, 0 }</code> <code>friction</code> <code>number</code> The friction coefficient of the character. <code>0.5</code> <code>gravityFactor</code> <code>number</code> The factor by which gravity affects the character. <code>1.0</code> <code>jumpForce</code> <code>number</code> The force applied when the character jumps. <code>6.0</code> <code>maxSlopeAngle</code> <code>number</code> The maximum slope angle the character can walk on. <code>45.0</code> <code>speed</code> <code>number</code> The movement speed of the character. <code>1.0</code> <code>sprintMultiplier</code> <code>number</code> The multiplier applied to the character's speed when sprinting. <code>2.0</code> <code>canMoveWhileJumping</code> <code>boolean</code> Determines if the character can move while jumping. <code>false</code> <code>activate</code> <code>boolean</code> Determines if the character is active. <code>true</code> <code>layer</code> <code>string</code> The collision layer of the character. Options are <code>\"MOVING\"</code>, <code>\"NON_MOVING\"</code>. <code>\"MOVING\"</code>"},{"location":"character/#functions","title":"Functions","text":""},{"location":"character/#add","title":"Add","text":"DetailsExample <p>Adds the character to the simulation and assigns it a unique <code>id</code>. </p> <p>This function serializes the character's properties and adds it to the simulation, generating and assigning a unique identifier (id) for the character. This id is used in subsequent operations to reference this specific character within the simulation.</p> <pre><code>local character = AOP:Character()\ncharacter:Add()\n</code></pre>"},{"location":"character/#input","title":"Input","text":"DetailsReturnsExample <p>Creates an input table for controlling the character's movement. </p> <p>This function returns a table with default values for character movement, including directions and action states (jump, sprint, crouch). This input table can be modified and passed to <code>SendInput</code> to control the character.</p> <ul> <li><code>input</code> (<code>table</code>): A table containing the following fields:<ul> <li><code>x</code> (<code>number</code>): The input value for movement along the x-axis (left/right).</li> <li><code>z</code> (<code>number</code>): The input value for movement along the z-axis (forward/backward).</li> <li><code>jump</code> (<code>boolean</code>): Whether the character should jump.</li> <li><code>sprint</code> (<code>boolean</code>): Whether the character should sprint.</li> <li><code>crouch</code> (<code>boolean</code>): Whether the character should crouch.</li> </ul> </li> </ul> <pre><code>local character = AOP:Character()\nlocal input = character:Input()\ninput.x = 1.0\ninput.z = 0.5\ninput.jump = true\n</code></pre>"},{"location":"character/#sendinput","title":"SendInput","text":"DetailsParametersExample <p>Sends the character's movement input to the simulation. </p> <p>This function takes an input table (as created by the <code>Input</code> function) and sends it to the simulation, updating the character's movement and actions based on the input.</p> <ul> <li><code>data</code> (<code>table</code>): A table containing the character's movement and action input values.</li> </ul> <pre><code>local character = AOP:Character()\ncharacter:Add()\nlocal input = character:Input()\ninput.x = 1.0\ninput.z = 0.5\ninput.jump = true\ncharacter:SendInput(input)\n</code></pre>"},{"location":"character/#example","title":"Example","text":"<p>This example demonstrates how to create a character, configure its properties, and control its movement.</p>"},{"location":"character/#code","title":"Code","text":"<pre><code>local character = AOP:Character()     -- Create a new character instance.\ncharacter.position = { 0, 1, 0 }      -- Set the initial position of the character.\ncharacter.speed = 2.0                 -- Set the movement speed of the character.\ncharacter:Add()                       -- Add the character to the simulation.\n\nlocal input = character:Input()       -- Create an input table.\ninput.x = 1.0                         -- Move right.\ninput.z = 0.5                         -- Move forward.\ninput.jump = true                     -- Make the character jump.\n\ncharacter:SendInput(input)            -- Send the input to the simulation.\n</code></pre>"},{"location":"character/#description","title":"Description","text":"<ul> <li>Create a Character Instance: <code>AOP:Character()</code> creates a new character instance.</li> <li>Set Position: The <code>position</code> property is set to <code>{ 0, 1, 0 }</code>, defining the character's initial location in the simulation.</li> <li>Set Speed: The <code>speed</code> property is set to <code>2.0</code>, increasing the character's movement speed.</li> <li>Add to Simulation: The <code>Add</code> method is called to add the character to the simulation.</li> <li>Create Input: The <code>Input</code> method is used to generate an input table for controlling the character.</li> <li>Modify Input: The <code>x</code>, <code>z</code>, and <code>jump</code> fields in the input table are set to control the character's movement and jumping action.</li> <li>Send Input: The <code>SendInput</code> method sends the input to the simulation, causing the character to move and jump.</li> </ul>"},{"location":"compile_wasm/","title":"Building Wasm Compiler","text":""},{"location":"prerequisites/","title":"Prerequisites","text":"<p>Before you can start setting up and running the WASM compiler and Hyperbeam repository, make sure you have the following tools installed:</p>"},{"location":"prerequisites/#1-install-docker","title":"1. Install Docker","text":"<p>Docker is required to create and manage isolated environments for building and running your projects.</p>"},{"location":"prerequisites/#installation-instructions","title":"Installation Instructions:","text":"<ul> <li>On Linux:</li> <li>Update your package index: <pre><code>sudo apt update\n</code></pre></li> <li>Install Docker: <pre><code>sudo apt install docker.io\n</code></pre></li> <li> <p>Add your user to the Docker group (optional, for running Docker without <code>sudo</code>): <pre><code>sudo usermod -aG docker $USER\n</code></pre></p> </li> <li> <p>On macOS:</p> </li> <li>Download Docker from the official site: Docker Desktop for Mac.</li> <li> <p>Follow the instructions on the website to complete the installation.</p> </li> <li> <p>On Windows:</p> </li> <li>Download Docker Desktop for Windows: Docker Desktop for Windows.</li> <li>Follow the installation guide provided on the website.</li> </ul> <p>For detailed installation instructions and troubleshooting, refer to the official Docker documentation: Install Docker.</p>"},{"location":"prerequisites/#2-install-erlang-and-rebar3","title":"2. Install Erlang and Rebar3","text":"<p>Erlang is a key component for building and running projects that require concurrent, distributed systems. Rebar3 is a build tool for Erlang projects.</p>"},{"location":"prerequisites/#installation-instructions_1","title":"Installation Instructions:","text":"<ul> <li>On Linux (Debian-based):</li> <li>Install Erlang: <pre><code>sudo apt update\nsudo apt install erlang\n</code></pre></li> <li> <p>Install Rebar3: <pre><code>wget https://github.com/erlang/rebar3/releases/download/3.16.0/rebar3-3.16.0.tar.gz\ntar xzvf rebar3-3.16.0.tar.gz\nsudo mv rebar3 /usr/local/bin\n</code></pre></p> </li> <li> <p>On macOS:</p> </li> <li>Install Erlang using Homebrew: <pre><code>brew install erlang\n</code></pre></li> <li> <p>Install Rebar3: <pre><code>brew install rebar3\n</code></pre></p> </li> <li> <p>On Windows:</p> </li> <li>Download the Erlang installer from the official site: Erlang/OTP.</li> <li>Install Rebar3 by downloading the latest release from the Rebar3 GitHub Releases Page.</li> </ul> <p>For more details on installation and version compatibility, refer to the official documentation: - Install Erlang - Install Rebar3</p>"},{"location":"prerequisites/#3-optional-for-aot-install-llvm-and-wamrc","title":"3. (Optional for AOT) Install LLVM and WAMRC","text":"<p>If you plan to work with Ahead-of-Time (AOT) compilation, you will need to install LLVM and the WAMRC compiler.</p>"},{"location":"prerequisites/#installation-instructions_2","title":"Installation Instructions:","text":"<ul> <li>On Linux:</li> <li>Install LLVM: <pre><code>sudo apt install llvm\n</code></pre></li> <li> <p>Install WAMRC (WebAssembly Machine Runtime Compiler):     Follow the instructions from the WAMRC GitHub repository.</p> </li> <li> <p>On macOS:</p> </li> <li>Install LLVM using Homebrew: <pre><code>brew install llvm\n</code></pre></li> <li> <p>Install WAMRC:     Follow the instructions from the WAMRC GitHub repository.</p> </li> <li> <p>On Windows:</p> </li> <li>Download LLVM from the official site: LLVM Downloads.</li> <li>Install WAMRC by following the instructions from the WAMRC GitHub repository.</li> </ul> <p>For more details on installation and configuration of these tools, refer to the respective official documentation for LLVM and WAMRC.</p> <p>Once you have installed the prerequisites, you will be ready to proceed with the setup and running of the WASM compiler and Hyperbeam repository.</p>"},{"location":"running_hyperbeam/","title":"Building Wasm Compiler","text":""},{"location":"setup_hyperbeam/","title":"Building Wasm Compiler","text":""}]}